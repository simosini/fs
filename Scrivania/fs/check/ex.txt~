
exercise:

1. write functions such that 

1.1 remove even numbers from int list
    rmEven : (int list -> int list)
    rmEven [2;5;5;87;6;100;2] = [5; 5; 87]

1.2 remove all elements in odd **position** from a list 
    considering the first element an even position.
    rmOdd : rmOdd : 'a list -> 'a list
    rmOdd   [20.4; 21.4; 22.4; 23.4; 24.4; 25.4; 26.4; 27.4] =
            [20.4;       22.4;       24.4;       26.4] 

1.3 split a list into two pair of lists consosting of the even and odd positions
    split : 'a list -> 'a list * 'a list
    split [0 .. 9] = ([0; 2; 4; 6; 8], [1; 3; 5; 7; 9])

2 Validate them with FsCheck writing the following properties



  + if I remove even numbers from a list, what's left are odds

  + if I remove the odd positions, the length of the resulting list is more or less halved // piÃ¹ facile 

  + in cases 1.2 and 1.3, the functions do not add "new" elements, that is the underlying resulting set is a subset of the starting one (Hint: define the inverse function of split)

  + in 1.3 splitting preserves the content of the original list
[], _ -> []
  You can use the function in the List library (example List.length) and the Set library for example Set.isSubset and  Set.ofList;;

